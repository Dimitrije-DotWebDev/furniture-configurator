mdl 1.6;

import ::math::*;
import ::state::*;
import ::tex::*;
import ::anno::*;
using ::OmniUe4Function import *;
using ::OmniUe4Base import *;

export annotation sampler_color();
export annotation sampler_normal();
export annotation sampler_grayscale();
export annotation sampler_alpha();
export annotation sampler_masks();
export annotation sampler_distancefield();
export annotation dither_masked_off();
export annotation world_space_normal();

export material A23DMAT_MDL_OmniUE4(
	float TilingUV = 1.0
	[[
		anno::display_name("Tiling UV"),
		anno::ui_order(1),
		anno::in_group("01- UV Controls")
	]],
	float TilingU = 1.0
	[[
		anno::display_name("Tiling U"),
		anno::ui_order(2),
		anno::in_group("01- UV Controls")
	]],
	float TilingV = 1.0
	[[
		anno::display_name("Tiling V"),
		anno::ui_order(3),
		anno::in_group("01- UV Controls")
	]],
	float OffsetU = 0.0
	[[
		anno::display_name("Offset U"),
		anno::ui_order(4),
		anno::in_group("01- UV Controls")
	]],
	float OffsetV = 0.0
	[[
		anno::display_name("Offset V"),
		anno::ui_order(5),
		anno::in_group("01- UV Controls")
	]],
	float Rotation = 0.0
	[[
		anno::display_name("Rotation"),
		anno::ui_order(6),
		anno::in_group("01- UV Controls"),
		anno::soft_range(0.0, 360.0)
	]],
	float4 AlbedoTint = float4(1.0,1.0,1.0,1.0)
	[[
		anno::display_name("Albedo Tint"),
		anno::ui_order(1),
		anno::in_group("02- Albedo")
	]],
	float AlbedoTintIntensity = 0.0
	[[
		anno::display_name("Albedo Tint Intensity"),
		anno::ui_order(2),
		anno::in_group("02- Albedo")
	]],
	float HUEShift = 0.0
	[[
		anno::display_name("HUE Shift"),
		anno::ui_order(3),
		anno::in_group("02- Albedo"),
		anno::soft_range(0.0, 1.0)
	]],
	float Saturation = 1.0
	[[
		anno::display_name("Saturation"),
		anno::ui_order(4),
		anno::in_group("02- Albedo")
	]],
	float AOMultiply = 1.0
	[[
		anno::display_name("AO Multiply"),
		anno::ui_order(1),
		anno::in_group("03- Ambient Occlusion")
	]],
	float AOOffset = 0.0
	[[
		anno::display_name("AO Offset"),
		anno::ui_order(2),
		anno::in_group("03- Ambient Occlusion")
	]],
	float MetalnessMultiply = 1.0
	[[
		anno::display_name("Metalness Multiply"),
		anno::ui_order(1),
		anno::in_group("04- Metalness")
	]],
	float MetalnessOffset = 0.0
	[[
		anno::display_name("Metalness Offset"),
		anno::ui_order(2),
		anno::in_group("04- Metalness")
	]],
	float RoughnessMultiply = 1.0
	[[
		anno::display_name("Roughness Multiply"),
		anno::ui_order(1),
		anno::in_group("05- Roughness")
	]],
	float RoughnessOffset = 0.0
	[[
		anno::display_name("Roughness Offset"),
		anno::ui_order(2),
		anno::in_group("05- Roughness")
	]],
	float NormalIntensity = 1.0
	[[
		anno::display_name("Normal Intensity"),
		anno::ui_order(1),
		anno::in_group("06- Normal")
	]],
	float OpacityMultiply = 1.0
	[[
		anno::display_name("Opacity Multiply"),
		anno::ui_order(1),
		anno::in_group("07- Opacity")
	]],
	float OpacityOffset = 1.0
	[[
		anno::display_name("Opacity Offset"),
		anno::ui_order(2),
		anno::in_group("07- Opacity")
	]],
	float SpecularMultiply = 1.0
	[[
		anno::display_name("Specular Multiply"),
		anno::ui_order(1),
		anno::in_group("08- Specular")
	]],
	float SpecularOffset = 0.5
	[[
		anno::display_name("Specular Offset"),
		anno::ui_order(2),
		anno::in_group("08- Specular")
	]],
	float SpecularLevelMultiply = 1.0
	[[
		anno::display_name("Specular Level Multiply"),
		anno::ui_order(3),
		anno::in_group("08- Specular")
	]],
	float SpecularLevelOffset = 0.0
	[[
		anno::display_name("Specular Level Offset"),
		anno::ui_order(4),
		anno::in_group("08- Specular")
	]],
	uniform texture_2d Albedo = texture_2d("./A23DTEX_Albedo.jpg",::tex::gamma_srgb)
	[[
		anno::display_name("Albedo"),
		anno::ui_order(1),
		anno::in_group("00- Maps"),
		sampler_color()
	]],
	uniform texture_2d AmbientOcclusion = texture_2d("./A23DTEX_Ambient Occlusion.jpg",::tex::gamma_linear)
	[[
		anno::display_name("Ambient Occlusion"),
		anno::ui_order(2),
		anno::in_group("00- Maps"),
		sampler_color()
	]],
	uniform texture_2d Metallic = texture_2d("./A23DTEX_Metallic.jpg",::tex::gamma_linear)
	[[
		anno::display_name("Metallic"),
		anno::ui_order(3),
		anno::in_group("00- Maps"),
		sampler_color()
	]],
	uniform texture_2d Roughness = texture_2d("./A23DTEX_Roughness.jpg",::tex::gamma_linear)
	[[
		anno::display_name("Roughness"),
		anno::ui_order(4),
		anno::in_group("00- Maps"),
		sampler_color()
	]],
	uniform texture_2d Normal = texture_2d("./A23DTEX_Normal.jpg",::tex::gamma_linear)
	[[
		anno::display_name("Normal"),
		anno::ui_order(5),
		anno::in_group("00- Maps"),
		sampler_normal()
	]],
	uniform texture_2d Opacity = texture_2d()
	[[
		anno::display_name("Opacity"),
		anno::ui_order(9),
		anno::in_group("00- Maps"),
		sampler_color()
	]],
	uniform texture_2d Specular = texture_2d()
	[[
		anno::display_name("Specular"),
		anno::ui_order(7),
		anno::in_group("00- Maps"),
		sampler_color()
	]],
	uniform texture_2d Specular_Level = texture_2d("./A23DTEX_Specular Level.jpg",::tex::gamma_linear)
	[[
		anno::display_name("Specular_Level"),
		anno::ui_order(8),
		anno::in_group("00- Maps"),
		sampler_color()
	]],
	int MaxTexCoordIndex = 3
	[[
		anno::hidden()
	]])
[[
	dither_masked_off()
]]
 = 
	let {
	float3 WorldPositionOffset_mdl = float3(0.0,0.0,0.0);
	float2 CustomizedUV0_mdl = float2(state::texture_coordinate(math::min(0,MaxTexCoordIndex)).x,1.0-state::texture_coordinate(math::min(0,MaxTexCoordIndex)).y);

	float2 Local0 = (float2(0.5,0.5) * -1.0);
	float2 Local1 = (CustomizedUV0_mdl * TilingUV);
	float2 Local2 = (Local1 * float2(TilingU,TilingV));
	float2 Local3 = (1.0 + float2(OffsetU,OffsetV));
	float2 Local4 = (Local2 + Local3);
	float2 Local5 = (Local0 + Local4);
	float Local6 = (Rotation / 360.0);
	float Local7 = (Local6 * 6.283185);
	float Local8 = math::cos(Local7);
	float Local9 = math::sin(Local7);
	float Local10 = (Local9 * -1.0);
	float Local11 = math::dot(Local5, float2(Local8,Local10));
	float Local12 = math::dot(Local5, float2(Local9,Local8));
	float2 Local13 = (float2(0.5,0.5) + float2(Local11,Local12));
	float4 Local14 = ::unpack_normal_map(tex::lookup_float4(Normal,float2(Local13.x,1.0-Local13.y),tex::wrap_repeat,tex::wrap_repeat));
	float Local15 = (1.0 - NormalIntensity);
	float3 Local16 = math::lerp(float3(Local14.x,Local14.y,Local14.z),float3(0.0,0.0,1.0),Local15);

	float3 Normal_mdl = Local16;

	float Local17 = (HUEShift * 6.283185);
	float Local18 = math::dot(float3(1.0,1.0,1.0), float3(1.0,1.0,1.0));
	float Local19 = math::sqrt(Local18);
	float3 Local20 = (float3(1.0,1.0,1.0) / Local19);
	float4 Local21 = tex::lookup_float4(Albedo,float2(Local13.x,1.0-Local13.y),tex::wrap_repeat,tex::wrap_repeat);
	float3 Local22 = (1.0 - float3(Local21.x,Local21.y,Local21.z));
	float3 Local23 = (Local22 * 2.0);
	float3 Local24 = (1.0 - float3(AlbedoTint.x,AlbedoTint.y,AlbedoTint.z));
	float3 Local25 = (Local23 * Local24);
	float3 Local26 = (1.0 - Local25);
	float3 Local27 = (float3(Local21.x,Local21.y,Local21.z) * 2.0);
	float3 Local28 = (Local27 * float3(AlbedoTint.x,AlbedoTint.y,AlbedoTint.z));
	float Local29 = ((float3(Local21.x,Local21.y,Local21.z).x >= 0.5) ? Local26.x : Local28.x);
	float Local30 = ((float3(Local21.x,Local21.y,Local21.z).y >= 0.5) ? Local26.y : Local28.y);
	float Local31 = ((float3(Local21.x,Local21.y,Local21.z).z >= 0.5) ? Local26.z : Local28.z);
	float3 Local32 = math::lerp(float3(Local21.x,Local21.y,Local21.z),float3(float2(Local29,Local30).x,float2(Local29,Local30).y,Local31),AlbedoTintIntensity);
	float3 Local33 = ::rotate_about_axis(float4(Local20.x,Local20.y,Local20.z,Local17),float3(0.0,0.0,0.0),Local32);
	float3 Local34 = (Local33 + Local32);
	float Local35 = math::dot(Local34, float3(0.3,0.59,0.11));
	float Local36 = (1.0 - Saturation);
	float3 Local37 = math::lerp(Local34,float3(Local35,Local35,Local35),Local36);
	float4 Local38 = tex::lookup_float4(AmbientOcclusion,float2(Local13.x,1.0-Local13.y),tex::wrap_repeat,tex::wrap_repeat);
	float3 Local39 = (float3(Local38.x,Local38.y,Local38.z) * AOMultiply);
	float3 Local40 = (Local39 + AOOffset);
	float3 Local41 = (Local37 * Local40);
	float4 Local42 = tex::lookup_float4(Metallic,float2(Local13.x,1.0-Local13.y),tex::wrap_repeat,tex::wrap_repeat);
	float3 Local43 = (float3(Local42.x,Local42.y,Local42.z) * MetalnessMultiply);
	float3 Local44 = (Local43 + MetalnessOffset);
	float4 Local45 = tex::lookup_float4(Specular,float2(Local13.x,1.0-Local13.y),tex::wrap_repeat,tex::wrap_repeat);
	float3 Local46 = (float3(Local45.x,Local45.y,Local45.z) * SpecularMultiply);
	float3 Local47 = (Local46 + SpecularOffset);
	float4 Local48 = tex::lookup_float4(Specular_Level,float2(Local13.x,1.0-Local13.y),tex::wrap_repeat,tex::wrap_repeat);
	float3 Local49 = (float3(Local48.x,Local48.y,Local48.z) * SpecularLevelMultiply);
	float3 Local50 = (Local49 + SpecularLevelOffset);
	float3 Local51 = (Local47 * Local50);
	float4 Local52 = tex::lookup_float4(Roughness,float2(Local13.x,1.0-Local13.y),tex::wrap_repeat,tex::wrap_repeat);
	float3 Local53 = (float3(Local52.x,Local52.y,Local52.z) * RoughnessMultiply);
	float3 Local54 = (Local53 + RoughnessOffset);
	float4 Local55 = tex::lookup_float4(Opacity,float2(Local13.x,1.0-Local13.y),tex::wrap_repeat,tex::wrap_repeat);
	float3 Local56 = (float3(Local55.x,Local55.y,Local55.z) * OpacityMultiply);
	float3 Local57 = (Local56 + OpacityOffset);

	float3 EmissiveColor_mdl = float3(0.0,0.0,0.0);
	float OpacityMask_mdl = (Local57.x - 0.3333) < 0.0f ? 0.0f : 1.0f;
	float3 BaseColor_mdl = Local41;
	float Metallic_mdl = Local44.x;
	float Specular_mdl = Local51.x;
	float Roughness_mdl = Local54.x;

	} in
		::OmniUe4Base(
			base_color: BaseColor_mdl,
			metallic: Metallic_mdl,
			roughness: Roughness_mdl,
			specular: Specular_mdl,
			normal: Normal_mdl,
			opacity: OpacityMask_mdl,
			emissive_color: EmissiveColor_mdl,
			displacement: WorldPositionOffset_mdl,
			two_sided: false);
